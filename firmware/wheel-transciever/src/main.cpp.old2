#include <Arduino.h>
#include <BLE2902.h>
#include <BLEClient.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>

BLECharacteristic* pCharacteristic = NULL;

// Configuration
#define ADC_VERIFY_READ_DELAY 100  // Microseconds
#define ADC_VERIFY_READ_RANGE 50

// Define analog input pins
#define PIN_A0 A0  // Resistor ladder black
#define PIN_A1 A1  // Resistor ladder white
#define PIN_HORN D2
#define PIN_PADDLE_RIGHT D3
#define PIN_PADDLE_LEFT D4
#define PIN_BACKLIGHT D5

enum class ButtonID : uint8_t {
  NONE = 0,
  MODE = 1,
  LEFT = 2,
  NEXT_SONG = 3,
  OK = 4,
  UP = 5,
  PREV_SONG = 6,
  RETURN = 7,
  PHONE = 8,
  DOWN = 9,
  VOLUME_UP = 10,
  ASSISTANT = 11,
  RIGHT = 12,
  VOLUME_DOWN = 13,
  CRUISE_CONTROL = 14,
  CANCEL = 15,
  CC_PLUS = 16,
  CC_MINUS = 17,
  RADAR = 18,
  LANE_ASSIST = 19,
  PADDLE_LEFT = 20,
  PADDLE_RIGHT = 21,
  HORN = 22,
};

namespace Threshold {
// Resting state values
constexpr uint16_t A0_RESTING = 3500;
constexpr uint16_t A1_RESTING = 4000;

// A0 thresholds (values must be BELOW these to trigger)
constexpr uint16_t A0_VOLUME_DOWN = 1890;
constexpr uint16_t A0_RIGHT = 1860;
constexpr uint16_t A0_ASSISTANT = 1820;
constexpr uint16_t A0_VOLUME_UP = 980;
constexpr uint16_t A0_DOWN = 900;
constexpr uint16_t A0_PHONE = 850;
constexpr uint16_t A0_RETURN = 550;
constexpr uint16_t A0_PREV_SONG = 480;
constexpr uint16_t A0_UP = 400;
constexpr uint16_t A0_OK = 280;
constexpr uint16_t A0_NEXT_SONG = 180;
constexpr uint16_t A0_LEFT = 80;
constexpr uint16_t A0_MODE = 0;

// A1 thresholds (values must be BELOW these to trigger)
constexpr uint16_t A1_LANE_ASSIST = 1980;
constexpr uint16_t A1_RADAR = 1880;
constexpr uint16_t A1_CC_MINUS = 1600;
constexpr uint16_t A1_CC_PLUS = 820;
constexpr uint16_t A1_CANCEL = 320;
constexpr uint16_t A1_CRUISE_CONTROL = 0;

}  // namespace Threshold

ButtonID previousA0 = ButtonID::NONE;
ButtonID previousA1 = ButtonID::NONE;
bool previousHorn = false;
bool previousPaddleR = false;
bool previousPaddleL = false;

bool confirmADCReading(int pin, int firstReading) {
  delayMicroseconds(100);
  int secondReading = analogRead(pin);
  return abs(secondReading - firstReading) <= ADC_VERIFY_READ_RANGE;
}

ButtonID getA0() {
  uint16_t valueA0 = analogRead(PIN_A0);

  // Check if A0 is significantly below resting state
  if (valueA0 < (Threshold::A0_RESTING)) {
    Serial.println(valueA0);
    if (valueA0 > Threshold::A0_VOLUME_DOWN &&
        confirmADCReading(PIN_A0, valueA0))
      return ButtonID::VOLUME_DOWN;
    if (valueA0 > Threshold::A0_RIGHT && confirmADCReading(PIN_A0, valueA0))
      return ButtonID::RIGHT;
    if (valueA0 > Threshold::A0_ASSISTANT && confirmADCReading(PIN_A0, valueA0))
      return ButtonID::ASSISTANT;
    if (valueA0 > Threshold::A0_VOLUME_UP && confirmADCReading(PIN_A0, valueA0))
      return ButtonID::VOLUME_UP;
    if (valueA0 > Threshold::A0_DOWN && confirmADCReading(PIN_A0, valueA0))
      return ButtonID::DOWN;
    if (valueA0 > Threshold::A0_PHONE && confirmADCReading(PIN_A0, valueA0))
      return ButtonID::PHONE;
    if (valueA0 > Threshold::A0_RETURN && confirmADCReading(PIN_A0, valueA0))
      return ButtonID::RETURN;
    if (valueA0 > Threshold::A0_PREV_SONG && confirmADCReading(PIN_A0, valueA0))
      return ButtonID::PREV_SONG;
    if (valueA0 > Threshold::A0_UP && confirmADCReading(PIN_A0, valueA0))
      return ButtonID::UP;
    if (valueA0 > Threshold::A0_OK && confirmADCReading(PIN_A0, valueA0))
      return ButtonID::OK;
    if (valueA0 > Threshold::A0_NEXT_SONG && confirmADCReading(PIN_A0, valueA0))
      return ButtonID::NEXT_SONG;
    if (valueA0 > Threshold::A0_LEFT && confirmADCReading(PIN_A0, valueA0))
      return ButtonID::LEFT;
    if (valueA0 >= Threshold::A0_MODE && confirmADCReading(PIN_A0, valueA0))
      return ButtonID::MODE;
  }

  return ButtonID::NONE;
}

ButtonID getA1() {
  uint16_t valueA1 = analogRead(PIN_A1);

  // Check if A1 is significantly below resting state
  if (valueA1 < (Threshold::A1_RESTING)) {
    Serial.println(valueA1);
    if (valueA1 > Threshold::A1_LANE_ASSIST &&
        confirmADCReading(PIN_A1, valueA1))
      return ButtonID::LANE_ASSIST;
    if (valueA1 > Threshold::A1_RADAR && confirmADCReading(PIN_A1, valueA1))
      return ButtonID::RADAR;
    if (valueA1 > Threshold::A1_CC_MINUS && confirmADCReading(PIN_A1, valueA1))
      return ButtonID::CC_MINUS;
    if (valueA1 > Threshold::A1_CC_PLUS && confirmADCReading(PIN_A1, valueA1))
      return ButtonID::CC_PLUS;
    if (valueA1 > Threshold::A1_CANCEL && confirmADCReading(PIN_A1, valueA1))
      return ButtonID::CANCEL;
    if (valueA1 >= Threshold::A1_CRUISE_CONTROL &&
        confirmADCReading(PIN_A1, valueA1))
      return ButtonID::CRUISE_CONTROL;
  }

  return ButtonID::NONE;
}

bool getHorn() { return digitalRead(PIN_HORN) == LOW; }

bool getPaddleR() { return digitalRead(PIN_PADDLE_RIGHT) == LOW; }

bool getPaddleL() { return digitalRead(PIN_PADDLE_LEFT) == LOW; }

const char* buttonToString(ButtonID button) {
  switch (button) {
    case ButtonID::NONE:
      return "NONE";
    case ButtonID::MODE:
      return "MODE";
    case ButtonID::LEFT:
      return "LEFT";
    case ButtonID::NEXT_SONG:
      return "NEXT_SONG";
    case ButtonID::OK:
      return "OK";
    case ButtonID::UP:
      return "UP";
    case ButtonID::PREV_SONG:
      return "PREV_SONG";
    case ButtonID::RETURN:
      return "RETURN";
    case ButtonID::PHONE:
      return "PHONE";
    case ButtonID::DOWN:
      return "DOWN";
    case ButtonID::VOLUME_UP:
      return "VOLUME_UP";
    case ButtonID::ASSISTANT:
      return "ASSISTANT";
    case ButtonID::RIGHT:
      return "RIGHT";
    case ButtonID::VOLUME_DOWN:
      return "VOLUME_DOWN";
    case ButtonID::CRUISE_CONTROL:
      return "CRUISE_CONTROL";
    case ButtonID::CANCEL:
      return "CANCEL";
    case ButtonID::CC_PLUS:
      return "CC_PLUS";
    case ButtonID::CC_MINUS:
      return "CC_MINUS";
    case ButtonID::RADAR:
      return "RADAR";
    case ButtonID::LANE_ASSIST:
      return "LANE_ASSIST";
    case ButtonID::PADDLE_LEFT:
      return "PADDLE_LEFT";
    case ButtonID::PADDLE_RIGHT:
      return "PADDLE_RIGHT";
    case ButtonID::HORN:
      return "HORN";
    default:
      return "UNKNOWN";
  }
}

void setup() {
  Serial.begin(115200);
  analogReadResolution(12);
  pinMode(PIN_A0, INPUT);
  pinMode(PIN_A1, INPUT);
  pinMode(PIN_HORN, INPUT);
  pinMode(PIN_PADDLE_RIGHT, INPUT);
  pinMode(PIN_PADDLE_LEFT, INPUT);
  pinMode(PIN_BACKLIGHT, OUTPUT);
  delay(1000);
}

void handleButtonStateChange(bool currentState, bool& previousState,
                             ButtonID buttonId) {
  if (currentState != previousState) {
    uint8_t value = static_cast<uint8_t>(buttonId);
    if (previousState) {
      value |= 0x80;  // off flag
    }
    if (currentState ||
        previousState) {  // only send if there's a change to report
      pCharacteristic->setValue(&value, 1);
      pCharacteristic->notify();
    }
    previousState = currentState;
  }
}

void handleButtonIDStateChange(ButtonID currentButton,
                               ButtonID& previousButton) {
  if (currentButton != previousButton) {
    if (previousButton != ButtonID::NONE) {
      uint8_t value = static_cast<uint8_t>(previousButton) | 0x80;  // off flag
      pCharacteristic->setValue(&value, 1);
      pCharacteristic->notify();
    }
    if (currentButton != ButtonID::NONE) {
      uint8_t value = static_cast<uint8_t>(currentButton);
      pCharacteristic->setValue(&value, 1);
      pCharacteristic->notify();
    }
    previousButton = currentButton;
  }
}

void loop() {
  ButtonID currentA0 = getA0();
  ButtonID currentA1 = getA1();
  bool currentHorn = getHorn();
  bool currentPaddleR = getPaddleR();
  bool currentPaddleL = getPaddleL();

  handleButtonIDStateChange(currentA0, previousA0);
  handleButtonIDStateChange(currentA1, previousA1);
  handleButtonStateChange(currentHorn, previousHorn, ButtonID::HORN);
  handleButtonStateChange(currentPaddleR, previousPaddleR,
                          ButtonID::PADDLE_RIGHT);
  handleButtonStateChange(currentPaddleL, previousPaddleL,
                          ButtonID::PADDLE_LEFT);
}